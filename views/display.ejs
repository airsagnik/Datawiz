<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>DATAWIZ</title>
    <!-- head is used to declare what we see on the tab(heading of website)
    it also has the metadata of the website -->

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=League+Spartan:wght@300&display=swap" rel="stylesheet">

     <!-- whenever we need to embed some font styles in our website we use this type of link
     this link is generated by google fonts -->

    <script src = "https://d3js.org/d3.v4.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

    <!-- d3 is connected or installed using this links
    once the website loads the browser downloads these links and enables the libraries for used
    we can see this link as an installation of the above libraries for our website -->

    <link rel="stylesheet" href="style2.css">
  </head>

  <body>

    <nav class="navbar navbar-light bg-light">
  <div class="container">
      <img src="https://blogs.sas.com/content/sascom/files/2014/12/94802938-600x600.jpg" alt="" width="30" height="24">
      <h1>DATAWIZ</h1>
    </a>
  </div>
</nav>

<!-- since we are using bootstrap here the above code uses bootstarp class to set up our navigation bar -->
<!-- refer to this link for better understanding https://getbootstrap.com/docs/4.1/components/navbar/ -->

<div class="topic">
  <h1> <%=xname%> VS <%=yname%> </h1>
</div>

 <!-- the above code shows what we selected in the just below the navbar -->

<div class="message">

</div>
<div class="container">


<div class="row">
  <div class="col">
    <div class="graphcontain">
      <svg class="bargraph1 chartdisp">
      </svg>
    </div>
  </div>
</div>

<div class="row">
  <div class="col">
    <div class="graphcontain">
      <svg class="piechart1 chartdisp">
      </svg>
    </div>
  </div>
</div>

<div class="row">
  <div class="col">
    <div class="graphcontain">
      <svg class="linegraph1 chartdisp">
      </svg>
    </div>
  </div>
</div>

<div class="row">
  <div class="graphcontain">
    <div class="col">
      <svg class="scatterplot1 chartdisp">
      </svg>
    </div>
  </div>
</div>

</div>



<!-- again in the above code snippet we have made 4 rows with 1 column which holds a div and an SVG
SVG is an element on which we plot graphs using d3 The svg element is a container that defines a new coordinate system and viewport  -->

<!-- each of the SVG IS ASSOCIATED WITH A CLASS NAME THAT ENFORCES SOME CSS PROPERTIES -->



  </body>
</html>

<!-- WE HAVE WRITTEN  OUR JAVASCRIPT HERE  -->

<script type="text/javascript">
  var datasetx=[];
  var datasety=[];
  var processeddata= <%-xaxis%>;
  // ejs proces of bringing in any data from the server


  var margin = {top: 10, right: 30, bottom: 30, left: 60},
      width = window.screen.width*0.98 - margin.left - margin.right,
      height = 450 - margin.top - margin.bottom;

// the above margin applies to the graph in each svg

  console.log(typeof processeddata["yaxis"][0]);
  var flag=0;
  if(typeof processeddata["xaxis"][0]==='number' && typeof processeddata["yaxis"][0]==='string')
  {
    datasetx=processeddata["xaxis"];
    datasety=processeddata["yaxis"];
    flag=0;
  }
  else if(typeof processeddata["xaxis"][0]==='string' && typeof processeddata["yaxis"][0]==='number') {
    datasetx=processeddata["yaxis"];
    datasety=processeddata["xaxis"];
    flag=0;
  }
  else if(typeof processeddata["xaxis"][0]==='number' && typeof processeddata["yaxis"][0]==='number')
  {
    datasetx=processeddata["xaxis"];
    datasety=processeddata["yaxis"];
    flag=0;
  }
  else {
    flag=1;
  }

  //the if elese above checks if the user is sending the right kind of data for plotting
  //we alow number number plotting number string plotting but no string string plotting
  //only if data is valid then the graphs will be plotted

  if(flag==0)
  {
  var yscale = d3.scaleLinear()
            .domain([d3.max(datasetx),d3.min(datasetx)])
            .range([1,440]);
   //defining a xscale because all data uploaded might not fit our svg height
   //so we need to scale our data

 //ignore below for debug
  for(i=0;i<datasetx.length;i++)
  {
    console.log(yscale(datasetx[i]));
  }
  //ignore above for debug


  const svg1=d3.select(".bargraph1").append("g").attr("transform","translate(" + margin.left + "," + margin.top + ")")
  svg1.append('g')
      .call(d3.axisLeft(yscale));

      const xscale = d3.scaleBand()
        .range([0, (window.screen.width*0.98)-140])
        .domain(datasety.map((s) => s))
        .padding(0.2)

    svg1.append('g')
        .attr('transform', 'translate(0, 449)')
        .call(d3.axisBottom(xscale));
     const goals=[];
     for(i=0;i<datasetx.length;i++)
     {
       goals.push(i);
     }
        svg1.selectAll()
        .data(goals)
        .enter()
        .append('rect')
        .attr('x', (s) => xscale(datasety[s]))
        .attr('y', (s) => yscale(datasetx[s]))
        .attr('height', (s) =>(450 - yscale(datasetx[s])))
        .attr('width', xscale.bandwidth()).append("title").text((d)=>"Total casses:"+datasetx[d]);



  console.log("hello");

//ignore below for debug
  // const dset1 = [
  //       [ 34,78],
  //       [ 109,280],
  //       [ 310,120],
  //       [ 79,411],
  //       [ 420,220],
  //       [ 233,145],
  //       [ 333,96],
  //       [ 222,333],
  //       [ 78,320],
  //       [ 21,123]
  //     ];
    //ignore above for debug

      var scattersvg = d3.select(".scatterplot1")
        .append("g")
          .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

                scattersvg.append("g")
                  .attr("transform", "translate(0,450)")
                  .call(d3.axisBottom(xscale));

                  scattersvg.append("g")
                    .call(d3.axisLeft(yscale));

  scattersvg.selectAll("circle").data(goals).enter().append("circle").attr("cx",(d)=>xscale(datasety[d])+35).attr("cy",(d)=>yscale(datasetx[d])).attr("r",5);


//ignore below for debug
//   const colors=d3.scaleOrdinal(['#4daf4a','#377eb8','#ff7f00','#984ea3','#e41a1c']);
//   console.log(colors(21));
//   const dset2=[8,21,15,29,11,6];
//   var datapie=d3.pie().sort(null)(datasetx);
//   console.log(datapie);
//   var segment=d3.arc().innerRadius(0).outerRadius(150).padAngle(0.05).padRadius(50);
//   var section=d3.select(".piechart").append("g").attr("transform","translate(200,250)").selectAll("path").data(datapie);
//
//   section.enter().append("path").attr("d",segment).attr("fill",function(d,i){
//     console.log(i);
//     return colors(d.data);
//   })
//   section.selectAll("path").append("text")
// .attr("transform", function(d){ return "translate(" + segment.centroid(d) +")"; })
// .attr("text-anchor", "middle")
// .text(function(d,i){ return datasety[i];}).style("font-size", 17);

  //ignore above for debug

var svg = d3.select(".piechart1").append("g")
    .attr("transform", "translate(520,250)");

// Create dummy data


// set the color scale
const colors=d3.scaleOrdinal(['#4daf4a','#377eb8','#ff7f00','#984ea3','#e41a1c']);

// Compute the position of each group on the pie:
var pie = d3.pie().sort(null)(datasetx);
// Now I know that group A goes from 0 degrees to x degrees and so on.

// shape helper to build arcs:
var arcGenerator = d3.arc()
  .innerRadius(0)
  .outerRadius(210).padAngle(0.05).padRadius(50);

// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
svg
  .selectAll('mySlices')
  .data(pie)
  .enter()
  .append('path')
    .attr('d', arcGenerator)
    .attr('fill', function(d){ return(colors(d.data)) })
    .attr("stroke", "black")
    .style("stroke-width", "2px")
    .style("opacity", 0.7)

// Now add the annotation. Use the centroid method to get the best coordinates
svg
  .selectAll('mySlices')
  .data(pie)
  .enter()
  .append('text')
  .text(function(d,i){ return datasety[i]})
  .attr("transform", function(d) { return "translate(" + arcGenerator.centroid(d) + ")";  })
  .style("text-anchor", "middle")
  .style("font-size", 17)




  // append the svg object to the body of the page
  var svg = d3.select(".linegraph1")
    .append("g")
      .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

  //Read the data
  //d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv",

    // When reading the csv, I must format variables:
    // function(d){
    //   return { date : d3.timeParse("%Y-%m-%d")(d.date), value : d.value }
    // },

    // Now I can use this dataset:
    // function(data) {

      // Add X axis --> it is a date format
      // var x = d3.scaleTime()
      //   .domain(d3.extent(data, function(d) { return d.date; }))
      //   .range([ 0, width ]);
      svg.append("g")
        .attr("transform", "translate(0,450)")
        .call(d3.axisBottom(xscale));

      // Add Y axis
      // var y = d3.scaleLinear()
      //   .domain([0, d3.max(data, function(d) { return +d.value; })])
      //   .range([ height, 0 ]);
      svg.append("g")
        .call(d3.axisLeft(yscale));

      // Add the line
      svg.append("path")
        .datum(goals)
        .attr("fill", "none")
        .attr("stroke", "steelblue")
        .attr("stroke-width", 1.5)
        .attr("d", d3.line()
          .y(function(d) {
            return (yscale(datasetx[d])) })
          .x(function(d) {
            return (xscale(datasety[d])+35)})
        );
      }
      else
      {
           d3.selectAll("svg").remove();

           d3.select(".message").append("h4").text("You have selected unplotable data");
      }

  // })

</script>
