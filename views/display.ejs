<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>DATAWIZ</title>
    <script src = "https://d3js.org/d3.v4.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="stylesheet" href="style2.css">
  </head>

  <body>

    <nav class="navbar navbar-light bg-light">
  <div class="container">
      <img src="https://blogs.sas.com/content/sascom/files/2014/12/94802938-600x600.jpg" alt="" width="30" height="24">
      <h1>DATAWIZ</h1>
    </a>
  </div>
</nav>
<div class="topic">
  <h1> <%=xname%> VS <%=yname%> </h1> 
</div>
<div class="container">


<div class="row">
  <div class="col">

    <div class="graphcontain">
      <svg class="bargraph chartdisp">
      </svg>
    </div>

  </div>
  <div class="col">
    <div class="graphcontain">
      <svg class="linegraph chartdisp">
      </svg>
    </div>


  </div>
</div>
<div class="row">
  <div class="col">
    <svg class="piechart chartdisp">

    </svg>
  </div>
  <div class="col">
    <svg class="scatterplot chartdisp">

    </svg>
  </div>
</div>
</div>

  </body>
</html>

<script type="text/javascript">
  var datasetx=[];
  var datasety=[];
  var processeddata= <%-xaxis%>;
  var margin = {top: 10, right: 30, bottom: 30, left: 60},
      width = 460 - margin.left - margin.right,
      height = 400 - margin.top - margin.bottom;




  datasetx=processeddata["xaxis"];
  datasety=processeddata["yaxis"];


  var yscale = d3.scaleLinear()
            .domain([[d3.max(datasetx)],d3.min(datasetx)])
            .range([0,399]);



  for(i=0;i<datasetx.length;i++)
  {
    console.log(yscale(datasetx[i]));
  }

  // d3.select(".bargraph").append("g").attr("transform","translate(" + margin.left + "," + margin.top + ")").selectAll("rect").data(datasetx).enter().append("rect").attr("x",(d,i)=>30*i).attr("y",(d)=>400-(scale(d))).attr("width","25").attr("height",(d)=>(400-(400-scale(d)))).attr("class","bar").append("title").text((d)=>"Total casses:"+d);
  const svg1=d3.select(".bargraph").append("g").attr("transform","translate(" + margin.left + "," + margin.top + ")")
  svg1.append('g')
      .call(d3.axisLeft(yscale));

      const xscale = d3.scaleBand()
        .range([0, 400])
        .domain(datasety.map((s) => s))
        .padding(0.2)

    svg1.append('g')
        .attr('transform', 'translate(0, 400)')
        .call(d3.axisBottom(xscale));
     const goals=[];
     for(i=0;i<datasetx.length;i++)
     {
       goals.push(i);
     }
        svg1.selectAll()
        .data(goals)
        .enter()
        .append('rect')
        .attr('x', (s) => xscale(datasety[s]))
        .attr('y', (s) => yscale(datasetx[s]))
        .attr('height', (s) =>(400 - yscale(datasetx[s])))
        .attr('width', xscale.bandwidth()).append("title").text((d)=>"Total casses:"+datasetx[d]);



  console.log("hello");


  // const dset1 = [
  //       [ 34,78],
  //       [ 109,280],
  //       [ 310,120],
  //       [ 79,411],
  //       [ 420,220],
  //       [ 233,145],
  //       [ 333,96],
  //       [ 222,333],
  //       [ 78,320],
  //       [ 21,123]
  //     ];

      var scattersvg = d3.select(".scatterplot")
        .append("g")
          .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

                scattersvg.append("g")
                  .attr("transform", "translate(0,400)")
                  .call(d3.axisBottom(xscale));

                  scattersvg.append("g")
                    .call(d3.axisLeft(yscale));

  scattersvg.selectAll("circle").data(goals).enter().append("circle").attr("cx",(d)=>xscale(datasety[d])+15).attr("cy",(d)=>yscale(datasetx[d])).attr("r",5);

//   const colors=d3.scaleOrdinal(['#4daf4a','#377eb8','#ff7f00','#984ea3','#e41a1c']);
//   console.log(colors(21));
//   const dset2=[8,21,15,29,11,6];
//   var datapie=d3.pie().sort(null)(datasetx);
//   console.log(datapie);
//   var segment=d3.arc().innerRadius(0).outerRadius(150).padAngle(0.05).padRadius(50);
//   var section=d3.select(".piechart").append("g").attr("transform","translate(200,250)").selectAll("path").data(datapie);
//
//   section.enter().append("path").attr("d",segment).attr("fill",function(d,i){
//     console.log(i);
//     return colors(d.data);
//   })
//   section.selectAll("path").append("text")
// .attr("transform", function(d){ return "translate(" + segment.centroid(d) +")"; })
// .attr("text-anchor", "middle")
// .text(function(d,i){ return datasety[i];}).style("font-size", 17);

var svg = d3.select(".piechart").append("g")
    .attr("transform", "translate(200,250)");

// Create dummy data


// set the color scale
const colors=d3.scaleOrdinal(['#4daf4a','#377eb8','#ff7f00','#984ea3','#e41a1c']);

// Compute the position of each group on the pie:
var pie = d3.pie().sort(null)(datasetx);
// Now I know that group A goes from 0 degrees to x degrees and so on.

// shape helper to build arcs:
var arcGenerator = d3.arc()
  .innerRadius(0)
  .outerRadius(150).padAngle(0.05).padRadius(50);

// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
svg
  .selectAll('mySlices')
  .data(pie)
  .enter()
  .append('path')
    .attr('d', arcGenerator)
    .attr('fill', function(d){ return(colors(d.data)) })
    .attr("stroke", "black")
    .style("stroke-width", "2px")
    .style("opacity", 0.7)

// Now add the annotation. Use the centroid method to get the best coordinates
svg
  .selectAll('mySlices')
  .data(pie)
  .enter()
  .append('text')
  .text(function(d,i){ return datasety[i]})
  .attr("transform", function(d) { return "translate(" + arcGenerator.centroid(d) + ")";  })
  .style("text-anchor", "middle")
  .style("font-size", 17)






  // append the svg object to the body of the page
  var svg = d3.select(".linegraph")
    .append("g")
      .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

  //Read the data
  //d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv",

    // When reading the csv, I must format variables:
    // function(d){
    //   return { date : d3.timeParse("%Y-%m-%d")(d.date), value : d.value }
    // },

    // Now I can use this dataset:
    // function(data) {

      // Add X axis --> it is a date format
      // var x = d3.scaleTime()
      //   .domain(d3.extent(data, function(d) { return d.date; }))
      //   .range([ 0, width ]);
      svg.append("g")
        .attr("transform", "translate(0,400)")
        .call(d3.axisBottom(xscale));

      // Add Y axis
      // var y = d3.scaleLinear()
      //   .domain([0, d3.max(data, function(d) { return +d.value; })])
      //   .range([ height, 0 ]);
      svg.append("g")
        .call(d3.axisLeft(yscale));

      // Add the line
      svg.append("path")
        .datum(goals)
        .attr("fill", "none")
        .attr("stroke", "steelblue")
        .attr("stroke-width", 1.5)
        .attr("d", d3.line()
          .y(function(d) {
            return (yscale(datasetx[d])) })
          .x(function(d) {
            return (xscale(datasety[d])+15)})
        );

  // })

</script>
